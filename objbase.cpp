#include <iostream>
#include <unknwn.h>
#include "objbase.h"

using namespace std;

// ??????????
interface IX : IUnknown {
    virtual void _stdcall Fx() = 0;
};

interface IY : IUnknown {
    virtual void _stdcall Fy() = 0;
};

interface IZ : IUnknown {
    virtual void _stdcall Fz() = 0;
};

// ?????????
class CA : public IX, public IY {
public:
    // ?????????? ??????? ?????? IUnknown
    virtual ULONG _stdcall AddRef() { return 0; };
    virtual ULONG _stdcall Release() { return 0; };

    virtual HRESULT _stdcall QueryInterface(const IID& iid, void** ppv) {
        if (iid == IID_IUnknown1) {
            cout << "QueryInterface: ????????? ????????? ?? IUnknown" << endl;
            *ppv = static_cast<IX*>(this);
        }
        else if (iid == IID_IX) {
            cout << "QueryInterface: ????????? ????????? ?? IX" << endl;
            *ppv = static_cast<IX*>(this);
        }
        else if (iid == IID_IY) {
            cout << "QueryInterface: ????????? ????????? ?? IY" << endl;
            *ppv = static_cast<IY*>(this);
        }
        else {
            cout << "????????? ?? ??????????????" << endl;
            *ppv = NULL;
            return E_NOINTERFACE;
        }
        reinterpret_cast<IUnknown*>(*ppv)->AddRef();
        return S_OK;
    }

    // ?????????? ?????????? IX
    virtual void _stdcall Fx() { std::cout << "CA::Fx" << std::endl; };

    // ?????????? ?????????? IY
    virtual void _stdcall Fy() { std::cout << "CA::Fy" << std::endl; };

};

// ??????? ???????? ??????????
IUnknown* CreateInstance() {
    IUnknown* pI = static_cast<IX*>(new CA);
    pI->AddRef();
    return pI;
}

// ??????
int main() {

    setlocale(LC_ALL, "Russian");
    cout << "Hello, world!" << endl;

    HRESULT hr;

    cout << "??????: ???????? ????????? ?? IUnknown" << endl;
    IUnknown* pIUnknown = CreateInstance();

    cout << "\n??????: ???????? ????????? ?? IX" << endl;
    IX* pIX = NULL;
    hr = pIUnknown->QueryInterface(IID_IX, (void**)&pIX);
    if (SUCCEEDED(hr)) {
        cout << "??????: IX ??????? ???????" << endl;
        pIX->Fx();
    }

    cout << "\n??????: ???????? ????????? ?? IY" << endl;
    IY* pIY = NULL;
    hr = pIUnknown->QueryInterface(IID_IY, (void**)&pIY);
    if (SUCCEEDED(hr)) {
        cout << "??????: IY ??????? ???????" << endl;
        pIY->Fy();
    }

    cout << "\n??????: ???????? ???????????????? ?????????" << endl;
    IZ* pIZ = NULL;
    hr = pIUnknown->QueryInterface(IID_IZ, (void**)&pIZ);
    if (SUCCEEDED(hr)) {
        cout << "??????: ????????? IZ ??????? ???????" << endl;
    } else {
        cout << "??????: ?????????? ???????? ????????? IZ" << endl;
    }

    cout << "\n??????: ???????? ????????? ?? IY ????? IX" << endl;
    IY* pIYfromIX = NULL;
    hr = pIX->QueryInterface(IID_IY, (void**)&pIYfromIX);
    if (SUCCEEDED(hr)) {
        cout << "??????: ????????? ?? IY ??????? ???????" << endl;
        pIYfromIX->Fy();
    } else {
        cout << "??????: ?????????? ???????? ????????? ?? IY ????? IX" << endl;
    }

    cout << "\n??????: ???????? ????????? ?? IUnknown ????? IY" << endl;
    IUnknown* pIUnknownFromIY = NULL;
    hr = pIY->QueryInterface(IID_IUnknown1, (void**)&pIUnknownFromIY);
    if (SUCCEEDED(hr)) {
        cout << "????????? ??????? ???????" << endl;
        if (pIUnknownFromIY == pIUnknown) {
            cout << "??" << endl;
        } else {
            cout << "???" << endl;
        }
    }

    // ???????????? ????????
    delete pIUnknown;

    return 0;
}